{"ast":null,"code":"var _jsxFileName = \"/Users/lauraaupert/Desktop/Dan/OxyMagic/client/src/components/JobRow.js/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Col, Row, Button, Accordion, Card, Table } from 'react-bootstrap';\nimport api from '../../utils/api';\n\nfunction JobRow() {\n  const [products, setProducts] = useState([]);\n  const [quantity, setQuantity] = useState(\"\");\n  const [date, setDate] = useState(\"\"); // const [ jobType, setJobType ] = useState({}) //product group\n\n  const [index, setIndex] = useState('');\n  const [price, setPrice] = useState(Number);\n  const [code, setCode] = useState(\"\");\n  const [product, setProduct] = useState({});\n  let total = quantity * price;\n  let tax = (total * 1.06625).toFixed(2);\n  let jobID = (Math.random() * 1000).toFixed(0);\n  let customerID = 7832;\n  var today = new Date();\n  var dd = today.getDate();\n  var mm = today.getMonth() + 1;\n  var yyyy = today.getFullYear();\n\n  if (dd < 10) {\n    dd = \"0\" + dd;\n  }\n\n  if (mm < 10) {\n    mm = \"0\" + mm;\n  }\n\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    api.saveJob(jobID, customerID, date, product, quantity, tax);\n  }\n\n  useEffect(() => {\n    api.getProducts().then(res => {\n      console.log(res.data);\n      setProducts(res.data);\n    }).catch(error => {\n      console.log('Error getting fake data: ' + error);\n    });\n  }, []);\n\n  function handleChange(e) {\n    setProduct(products[parseFloat(e.target.value)]);\n  }\n\n  useEffect(() => {\n    setPrice(product.price);\n    setCode(product.code);\n  }, [product]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"select\",\n    custom: true,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 1\n    }\n  }, \"Choose a Product\"), products.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      style: {\n        width: \"250px\"\n      },\n      key: index,\n      value: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, item.name);\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: 1,\n    onChange: e => setQuantity(parseInt(e.target.value)),\n    value: quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 1\n    }\n  }, \"$\", price), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 1\n    }\n  }, \"$\", total.toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }\n  }, \"$\", tax), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    min: today,\n    onChange: e => setDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    type: \"submit\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, \"Confirm Job\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"warning\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, \"Estimate Job\")))));\n}\n\nexport default JobRow;","map":{"version":3,"sources":["/Users/lauraaupert/Desktop/Dan/OxyMagic/client/src/components/JobRow.js/index.js"],"names":["React","useEffect","useState","Form","Col","Row","Button","Accordion","Card","Table","api","JobRow","products","setProducts","quantity","setQuantity","date","setDate","index","setIndex","price","setPrice","Number","code","setCode","product","setProduct","total","tax","toFixed","jobID","Math","random","customerID","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","handleSubmit","e","preventDefault","saveJob","getProducts","then","res","console","log","data","catch","error","handleChange","parseFloat","target","value","width","map","item","name","parseInt"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Form, Col, Row, Button, Accordion, Card, Table } from 'react-bootstrap';\nimport api from '../../utils/api'\n\n\nfunction JobRow() {\n    const [ products, setProducts ] = useState([])\n    const [ quantity, setQuantity ] = useState(\"\")\n    const [ date, setDate ] = useState(\"\")\n    // const [ jobType, setJobType ] = useState({}) //product group\n    const [ index, setIndex ] = useState('')\n    const [ price, setPrice ] = useState(Number)\n    const [ code, setCode ] = useState(\"\")\n    const [ product, setProduct ] = useState({})\n\n    let total = quantity*price\n    let tax = (total*1.06625).toFixed(2)\n\n\n    let jobID = (Math.random()*1000).toFixed(0)\n    \n    let customerID = 7832\n\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth()+1;\n    var yyyy = today.getFullYear();\n    if (dd < 10) {\n        dd = \"0\"+dd\n    }\n    if (mm < 10) {\n        mm = \"0\"+mm\n    }\n    today = yyyy+\"-\"+mm+\"-\"+dd;\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        api.saveJob(jobID, customerID, date, product, quantity, tax)\n    }\n\n    useEffect(() => {\n        api.getProducts()\n        .then(res => {\n          console.log(res.data)\n          setProducts(res.data);\n        })\n        .catch(error => {\n          console.log('Error getting fake data: ' + error);\n          })\n      \n      }, []);  \n\n      function handleChange(e) {\n        setProduct(products[parseFloat(e.target.value)])\n      }\n\n      useEffect(() => {\n        setPrice(product.price)\n        setCode(product.code)\n      }, [product])\n    \n\n    return(\n        <div>\n        {/* <Accordion>\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                    Add Job\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey=\"0\">\n            <Card.Body>\n                <Form>\n                    <Form.Row>\n                    <Table striped bordered hover>\n                        <Form.Group controlId=\"exampleForm.SelectCustom\">\n                        <thead>\n                        <tr>\n                        <th>Choose Service</th>\n                        <th>Quantity</th>\n                        <th>Unit Price</th>\n                        <th>Total</th>\n                        <th>Total with Tax</th>\n                        <th>Date</th>\n\n                        </tr>\n                    </thead> */}\n                    <tbody style={{width: \"100%\"}}>\n   <tr style={{width: \"100%\"}}>\n\n    <Form.Control as=\"select\" custom                \n    onChange={handleChange} \n>    \n{/* <Form.Label>Choose Service</Form.Label> */}\n\n<option key=\"default\">Choose a Product</option>\n{products.map((item, index)=>{\n              return ( \n        <option style={{width:\"250px\"}} key={index} value={index} \n        >{item.name}</option>\n\n        )})}\n\n</Form.Control>\n<td><input defaultValue={1} onChange={(e) => setQuantity(parseInt(e.target.value))} value={quantity}/></td>\n<td>${price}</td>\n<td>${total.toFixed(2)}</td>\n<td>${tax}</td>\n<td><input type=\"date\" min={today}onChange={(e) => setDate(e.target.value)}></input>\n</td>\n<td><Button variant=\"success\" type=\"submit\" onClick={handleSubmit}>Confirm Job</Button>\n</td>\n<td><Button variant=\"warning\" type=\"submit\" >Estimate Job</Button>\n</td>\n </tr>\n   </tbody>\n\n  {/* </Form.Group>\n</Table>\n</Form.Row>\n</Form>\n</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n\n</Accordion> */}\n</div>\n\n\n    )\n}\n\nexport default JobRow;"]},"metadata":{},"sourceType":"module"}